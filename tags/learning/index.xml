<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>learning on Loner Bytes</title>
    <link>https://Cyber-Aju.github.io/Blog/tags/learning/</link>
    <description>Recent content in learning on Loner Bytes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://Cyber-Aju.github.io/Blog/tags/learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python Day 1 Learning Document</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/python_01/</link>
      <pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/python_01/</guid>
      <description>üìò Python Day 1 Learning Document ‚úÖ Topics Practiced Variables &amp;amp; Data Types Basic Functions Lists Dictionaries Nested Data Access Control Flow (if-else) üß† Session Summary and Corrections üîπ Variables &amp;amp; Strings name = &amp;#34;ajmal&amp;#34; # ‚úÖ Valid string assignment age = 28 # ‚úÖ Integer assignment ajn = &amp;#39;2a&amp;#39; # ‚úÖ String with alphanumeric content ‚ùå Mistakes:
name = &amp;#34;ajmal # ‚ùå Missing closing quote ‚Äî causes `SyntaxError: EOL while scanning string literal` ajn = 2a # ‚ùå Invalid syntax ‚Äî 2a is not a valid variable assignment üîπ Printing and Types print(name) # ajmal print(type(name)) # &amp;lt;type &amp;#39;str&amp;#39;&amp;gt; (Python 2.</description>
    </item>
    
    <item>
      <title>Day 05/01</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-050124/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-050124/</guid>
      <description>SQL Interview Questions: A Comprehensive Guide When preparing for a SQL interview, it&amp;rsquo;s crucial to be well-versed in various aspects of database management and SQL queries. In this blog post, we&amp;rsquo;ll cover a range of SQL interview questions to help you brush up on your knowledge and feel more confident during your next interview.
Table of Contents Introduction Common SQL Interview Questions 1. What is SQL? 2. Difference between SQL and NoSQL 3.</description>
    </item>
    
    <item>
      <title>Day 02/01</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-020124/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-020124/</guid>
      <description>Step 1: Frequency Counting
An array mp of size 201 is created to store the frequency of each element in nums. This array&amp;rsquo;s size is chosen based on the problem constraints. Iterate through the array nums and update the frequency of each element in mp. Keep track of the maximum frequency encountered (stored in maxrow). Step 2: Initialize 2D Vector
Initialize a 2D vector ans with maxrow number of rows. This is based on the maximum frequency encountered.</description>
    </item>
    
    <item>
      <title>Learnings of the DEC</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-311223/</link>
      <pubDate>Sun, 31 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-311223/</guid>
      <description>UNIT I: INTRODUCTION TO NETWORK SECURITY Security Trends Abstract: Security trends in cybersecurity evolve to counter emerging threats and vulnerabilities.
Advantage: Provides insights into current and future security challenges. Disadvantage: Rapid changes require constant adaptation. Legal, Ethical, and Professional Aspects of Security
Abstract: Understanding legal and ethical considerations is vital for responsible cybersecurity practices. Advantage: Guides ethical decision-making in security. Disadvantage: Varied interpretations of laws and ethics globally. Security Policies and Models</description>
    </item>
    
    <item>
      <title>Learnings of the Day 14/12</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-141223/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-141223/</guid>
      <description>##JavaScript:
Day 3: Solving in 3 Different Ways Leetcode
From the question, we need to create three functions: increment(), decrement(), and reset(). Let&amp;rsquo;s explore three different ways to implement these functions.
1. Using Traditional Function var createCounter = function(init) { let presentCount = init; function increment() { return ++presentCount; } function decrement() { return --presentCount; } function reset() { return (presentCount = init); } return { increment, decrement, reset }; }; Time and Space Complexity: O(1)</description>
    </item>
    
    <item>
      <title>Learnings of the Day 13/12</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-131223/</link>
      <pubDate>Wed, 13 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-131223/</guid>
      <description>Git/Github Learning Summary Basics Git: Version control system created by Linus Torvalds in 2005. Repository: Tracks changes in a codebase and consists of commits (snapshots of files). Branch: An alternate history for code. Merge: Combines branches into a single codebase. Basic Context unstaged : before commiting it was in &amp;lsquo;unstaged&amp;rsquo; has happen. staged : after commiting it was in &amp;lsquo;staged&amp;rsquo; has happen. branch, helps to work on independenly of different modules that can be merge later.</description>
    </item>
    
    <item>
      <title>Learnings of the Day 12/12</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learining-of-the-day-121223/</link>
      <pubDate>Tue, 12 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learining-of-the-day-121223/</guid>
      <description>1. Problem: Can Make Arithmetic Progression From Sequence Leetcode
Original Code: class Solution { public: bool canMakeArithmeticProgression(vector&amp;lt;int&amp;gt;&amp;amp; arr) { for(int i=0;i&amp;lt;arr.size();i++) { int z=arr[0]-arr[1]; if(z!=(arr[i]-arr[i+1])) { return false; } } return true; } }; Modifications: class Solution { public: bool canMakeArithmeticProgression(vector&amp;lt;int&amp;gt;&amp;amp; arr) { sort(arr.begin(),arr.end()); int z=arr[1]-arr[0]; for(int i=0;i&amp;lt;(arr.size()-1);i++) { if(z!=(arr[i+1]-arr[i])) { return false; } } return true; } }; caused of &amp;lsquo;outbound errors&amp;rsquo;.
Complexity: Time Complexity: O(n) Space Complexity: O(1) Challenges Faced: Ensuring correct handling of edge cases and optimizing the code for efficiency and Outbounds Error Learnings: Importance of not always relying on sorting and exploring alternative approaches.</description>
    </item>
    
    <item>
      <title>Learnings of the Day 11/12</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-111223/</link>
      <pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-111223/</guid>
      <description>Problem solving&amp;rsquo;s 1. Repeated Substring Pattern leetcode
Code: bool repeatedSubstringPattern(char s[]){ char b[50]; for(int i=0;i&amp;lt;50;i++) { b[i]=0; } for(int i=0;s[i];i++) { int k=s[i]-&amp;#39;a&amp;#39;; b[k]++; } for(int i=0;i&amp;lt;50;i++) { if(b[i]!=0) { int a=b[1]; while(b[i]==a) { return true; } } } return false; } Modifications: Then corrected version of code in a previous response.
bool repeatedSubstringPattern(char s[]) { int len = strlen(s); for (int i = 1; i &amp;lt;= len / 2; i++) { if (len % i == 0) { int numRepeats = len / i; bool isRepeated = true; for (int j = i; j &amp;lt; len; j++) { if (s[j] !</description>
    </item>
    
    <item>
      <title>Learnings of the Day 10/12</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-101223/</link>
      <pubDate>Sun, 10 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-101223/</guid>
      <description>Problems Faced: 1. Git Initialization and Pushing: Issue: Facing errors while initializing Git and pushing to a new GitHub repository. Solution: Resolved by reinitializing Git, adding and committing files, and pushing to the repository. 2. GitHub Actions Workflow: Issue: Difficulty in setting up a GitHub Actions workflow for deployment. Solution: Provided guidance on creating a workflow file (deploy.yml) for deploying HTML, CSS, and JS files. 3. GitHub Actions Deprecation Warning: Issue: Received a warning about the deprecation of Node.</description>
    </item>
    
    <item>
      <title>Learnings of the Day 09/12</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-091223/</link>
      <pubDate>Sat, 09 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-091223/</guid>
      <description>Learnings of the Day Today&amp;rsquo;s exploration led to insightful learnings in the realm of operating systems, process lifecycles, creation of processes, termination, and scheduling algorithms.
Process Lifecycle: Importance: Resource Management:
Efficient allocation and deallocation of resources prevent leaks and ensure availability for other processes. Multitasking and Concurrency:
Understanding lifecycles supports concurrent execution and efficient context switching, crucial for multitasking. System Stability and Reliability:
Lifecycle stages ensure isolation, preventing interference between processes and contributing to system stability.</description>
    </item>
    
    <item>
      <title>Learnings of the Day 08/12</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-081223/</link>
      <pubDate>Fri, 08 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-081223/</guid>
      <description>Operating System Concepts Overview Introduction to Operating System (OS): 1. Definition of OS: OS (Operating System): A software that acts as an intermediary between computer hardware and user applications. 2. Why OS? User-Friendly Interface: OS provides a user-friendly interface. Efficient Resource Management: Manages hardware resources efficiently. Security and Virtualization: Ensures security and provides virtualization. 3. Functions of OS: Resource Management: Efficiently allocates and manages hardware resources. Virtualization: Creates a virtual environment for applications.</description>
    </item>
    
    <item>
      <title>Learnings of the Day 07/12</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-071223/</link>
      <pubDate>Thu, 07 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-071223/</guid>
      <description>Music &amp;amp; Me Project: Navigating Challenges and Learning Experiences Today marked the inception of my Music&amp;amp;Me project, an endeavor to connect ChatGPT with Spotify APIs. The vision was to create a platform where users could chat with ChatGPT, have their emotions analyzed, and receive personalized Spotify tracks in their mother tongue and English.
Challenges and Learnings The journey, however, encountered a roadblock when attempting to set up the project locally. Running npm install in the command line resulted in an endless hang, leaving me puzzled.</description>
    </item>
    
    <item>
      <title>Learnings of the Day 06/12</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-061223/</link>
      <pubDate>Wed, 06 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-061223/</guid>
      <description>Summarizing the key learnings Key Learnings: Service-Oriented Architecture (SOA) and Microservices:
Definition: SOA and microservices are architectural approaches for designing and developing software systems. SOA emphasizes building applications as a set of interconnected services, while microservices focus on creating small, independent services that work together. References: Industry practices, such as those adopted by companies like Netflix, Amazon, and Spotify, showcase the application of SOA and microservices in real-world scenarios. Evolution of Concepts in Technology:</description>
    </item>
    
    <item>
      <title>Learnings of the Day 05/12</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-051223/</link>
      <pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-051223/</guid>
      <description>Learnings of the Day 05/12 Learnings 1. Mirror of a Binary Tree Description: Explored the concept of mirroring a binary tree. Code Example: isMirror function checks if a tree is a mirror of itself. 2. Depth of a Binary Tree Description: Calculated the depth (height) of a binary tree. Code Example: Recursive approach to find the maximum depth of a tree. 3. Minimum Depth of a Binary Tree Description: Determined the minimum depth of a binary tree.</description>
    </item>
    
    <item>
      <title>Learnings of the Day 04/12</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learining-of-the-day-041223/</link>
      <pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learining-of-the-day-041223/</guid>
      <description>Learnings of the Day 04/12 Learnings Today Binary Trees Operations: Implemented various operations like insertion, search, and traversal (BFS, DFS). Recursive Algorithms: Explored recursive approaches for tree-related problems, enhancing understanding. Error Handling: Encountered and resolved type mismatch issues during implementations. Challenges Faced Pointer Understanding: Initially struggled with the distinction between &amp;lsquo;-&amp;gt;&amp;rsquo; and &amp;lsquo;.&amp;rsquo; when dealing with pointers. Overcoming Challenges Type Handling: Learned to handle type mismatches through explicit type conversions. Debugging Approach: Enhanced debugging skills to identify and resolve conversion errors effectively.</description>
    </item>
    
    <item>
      <title>Learnings of the Days 11/01</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-110124/</link>
      <pubDate>Wed, 11 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-110124/</guid>
      <description>Firstly I gather important questions &amp;amp; Topics of HTML/CSS. i.e.,
HTML/CSS (Frequently asked questions) Difference between ( Display:none visibility:hidden opacity:0 ) What are ways to hide elements in DOM. Pseudo class/ pseudo selector. What is a box model? Semantic element vs non semantic element. Focus on layouts, positioning, responsive design techniques, CSS preprocessors (e.g., Sass, Less), and any frameworks like Bootstrap or Material-UI. Web accessibility SEO How rendering works ( Reflow v/s Repaint ) Centring of div Async and defer.</description>
    </item>
    
    <item>
      <title>Learnings of the Days 10/01</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-days-100124/</link>
      <pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-days-100124/</guid>
      <description>Learned completely basics of pl/sql, Thanks to my placement director to spending much time on teaching pl/sql. He covers lots of nuances in the basics of sql with some keypoints related to placement point of view. I noted each &amp;amp; every point and tried to understand it.</description>
    </item>
    
  </channel>
</rss>
