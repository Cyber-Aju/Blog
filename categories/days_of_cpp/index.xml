<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Days_Of_Cpp on Loner Bytes</title>
    <link>https://Cyber-Aju.github.io/Blog/categories/days_of_cpp/</link>
    <description>Recent content in Days_Of_Cpp on Loner Bytes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://Cyber-Aju.github.io/Blog/categories/days_of_cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Day 02/01</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-020124/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-020124/</guid>
      <description>Step 1: Frequency Counting
An array mp of size 201 is created to store the frequency of each element in nums. This array&amp;rsquo;s size is chosen based on the problem constraints. Iterate through the array nums and update the frequency of each element in mp. Keep track of the maximum frequency encountered (stored in maxrow). Step 2: Initialize 2D Vector
Initialize a 2D vector ans with maxrow number of rows. This is based on the maximum frequency encountered.</description>
    </item>
    
    <item>
      <title>Learnings of the Day 14/12</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-141223/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-141223/</guid>
      <description>##JavaScript:
Day 3: Solving in 3 Different Ways Leetcode
From the question, we need to create three functions: increment(), decrement(), and reset(). Let&amp;rsquo;s explore three different ways to implement these functions.
1. Using Traditional Function var createCounter = function(init) { let presentCount = init; function increment() { return ++presentCount; } function decrement() { return --presentCount; } function reset() { return (presentCount = init); } return { increment, decrement, reset }; }; Time and Space Complexity: O(1)</description>
    </item>
    
    <item>
      <title>Learnings of the Day 12/12</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learining-of-the-day-121223/</link>
      <pubDate>Tue, 12 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learining-of-the-day-121223/</guid>
      <description>1. Problem: Can Make Arithmetic Progression From Sequence Leetcode
Original Code: class Solution { public: bool canMakeArithmeticProgression(vector&amp;lt;int&amp;gt;&amp;amp; arr) { for(int i=0;i&amp;lt;arr.size();i++) { int z=arr[0]-arr[1]; if(z!=(arr[i]-arr[i+1])) { return false; } } return true; } }; Modifications: class Solution { public: bool canMakeArithmeticProgression(vector&amp;lt;int&amp;gt;&amp;amp; arr) { sort(arr.begin(),arr.end()); int z=arr[1]-arr[0]; for(int i=0;i&amp;lt;(arr.size()-1);i++) { if(z!=(arr[i+1]-arr[i])) { return false; } } return true; } }; caused of &amp;lsquo;outbound errors&amp;rsquo;.
Complexity: Time Complexity: O(n) Space Complexity: O(1) Challenges Faced: Ensuring correct handling of edge cases and optimizing the code for efficiency and Outbounds Error Learnings: Importance of not always relying on sorting and exploring alternative approaches.</description>
    </item>
    
    <item>
      <title>Learnings of the Day 11/12</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-111223/</link>
      <pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-111223/</guid>
      <description>Problem solving&amp;rsquo;s 1. Repeated Substring Pattern leetcode
Code: bool repeatedSubstringPattern(char s[]){ char b[50]; for(int i=0;i&amp;lt;50;i++) { b[i]=0; } for(int i=0;s[i];i++) { int k=s[i]-&amp;#39;a&amp;#39;; b[k]++; } for(int i=0;i&amp;lt;50;i++) { if(b[i]!=0) { int a=b[1]; while(b[i]==a) { return true; } } } return false; } Modifications: Then corrected version of code in a previous response.
bool repeatedSubstringPattern(char s[]) { int len = strlen(s); for (int i = 1; i &amp;lt;= len / 2; i++) { if (len % i == 0) { int numRepeats = len / i; bool isRepeated = true; for (int j = i; j &amp;lt; len; j++) { if (s[j] !</description>
    </item>
    
    <item>
      <title>Learnings of the Day 05/12</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-051223/</link>
      <pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learning-of-the-day-051223/</guid>
      <description>Learnings of the Day 05/12 Learnings 1. Mirror of a Binary Tree Description: Explored the concept of mirroring a binary tree. Code Example: isMirror function checks if a tree is a mirror of itself. 2. Depth of a Binary Tree Description: Calculated the depth (height) of a binary tree. Code Example: Recursive approach to find the maximum depth of a tree. 3. Minimum Depth of a Binary Tree Description: Determined the minimum depth of a binary tree.</description>
    </item>
    
    <item>
      <title>Learnings of the Day 04/12</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learining-of-the-day-041223/</link>
      <pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learining-of-the-day-041223/</guid>
      <description>Learnings of the Day 04/12 Learnings Today Binary Trees Operations: Implemented various operations like insertion, search, and traversal (BFS, DFS). Recursive Algorithms: Explored recursive approaches for tree-related problems, enhancing understanding. Error Handling: Encountered and resolved type mismatch issues during implementations. Challenges Faced Pointer Understanding: Initially struggled with the distinction between &amp;lsquo;-&amp;gt;&amp;rsquo; and &amp;lsquo;.&amp;rsquo; when dealing with pointers. Overcoming Challenges Type Handling: Learned to handle type mismatches through explicit type conversions. Debugging Approach: Enhanced debugging skills to identify and resolve conversion errors effectively.</description>
    </item>
    
    <item>
      <title>Learnings of the Day 03/12</title>
      <link>https://Cyber-Aju.github.io/Blog/posts/learining-of-the-day-031223/</link>
      <pubDate>Sun, 03 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Cyber-Aju.github.io/Blog/posts/learining-of-the-day-031223/</guid>
      <description>A Journey into Hugo: Overcoming Challenges, Embracing New Learnings Learnings of the Day Today has been an exciting day filled with valuable lessons and new discoveries. The primary focus was on setting up a blog using Hugo, a static site generator, and the challenges encountered along the way.
1. Hugo Basics Learning the basics of Hugo, such as installing the tool, creating a new site, and understanding the structure of the configuration files, laid a strong foundation for the day&amp;rsquo;s journey.</description>
    </item>
    
  </channel>
</rss>
